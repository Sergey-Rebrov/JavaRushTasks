<div class="wdghtml" taskKey="com.javarush.task.task30.task3008.big08">
<h3>Чат (8)</h3>
<p>Класс <strong><span class="text-corporate">Handler</span></strong> должен реализовывать протокол общения с клиентом.<br />
Выделим из протокола отдельные этапы и реализуем их с помощью отдельных методов:</p>
<p><strong>Этап первый</strong> – это этап рукопожатия (знакомства сервера с клиентом). Реализуем его с<br />
помощью приватного метода <mark>String serverHandshake(Connection connection) throws IOException</mark>, <strong><span class="text-corporate">ClassNotFoundException</span></strong>. Метод в качестве параметра принимает соединение connection, а возвращает имя нового клиента.</p>
<p><strong>Реализация метода должна:</strong><br />
1) <strong>Сформировать</strong> и <strong>отправить</strong> команду запроса имени пользователя<br />
2) <strong>Получить</strong> <strong>ответ</strong> клиента<br />
3) <strong>Проверить</strong>, что получена команда с именем пользователя<br />
4) <strong>Достать</strong> из ответа <strong>имя</strong>, <strong>проверить</strong>, что оно не пустое и пользователь с таким именем еще не подключен (используй <mark>connectionMap</mark>)<br />
5) <strong>Добавить</strong> <strong>нового</strong> <strong>пользователя</strong> и <strong>соединение</strong> с ним в <mark>connectionMap</mark><br />
6) <strong>Отправить</strong> <strong>клиенту</strong> команду информирующую, что его имя принято<br />
7) Если какая-то <strong>проверка</strong> не прошла, <strong>заново</strong> запросить имя клиента<br />
8) <strong>Вернуть</strong> принятое <strong>имя</strong> в качестве возвращаемого значения</p>

<hr>
<h3>Чат (7)</h3>
<p>Т.к. сервер может одновременно работать с несколькими клиентами, нам понадобится<br />
метод для отправки сообщения сразу всем.</p>
<p><strong>Добавь в класс Server:</strong><br />
1. Статическое поле <span class="text-red"><strong>Map</strong>&lt;String, Connection&gt;</span> <strong><span class="text-red">connectionMap</span></strong>, где ключом будет имя<br />
клиента, а значением &#8212; соединение с ним.<br />
2. Инициализацию поля из <strong>п.7.1</strong> с помощью подходящего <strong>Map</strong> из библиотеки<br />
<strong>java.util.concurrent</strong>, т.к. работа с этим полем будет происходить из разных потоков и<br />
нужно обеспечить потокобезопасность.<br />
3. Статический метод <mark>void sendBroadcastMessage(Message <strong>message</strong>)</mark>, который должен<br />
отправлять сообщение message всем соединениям из <strong>connectionMap</strong>. Если при<br />
отправке сообщение произойдет исключение <strong>IOException</strong>, нужно отловить его и<br />
сообщить пользователю, что не смогли отправить сообщение.</p>

<hr>
<h3>Чат (6)</h3>
<p>Приступим к самому важному – написанию класса Server. Сервер должен поддерживать</p>
<p>множество соединений с разными клиентами одновременно. Это можно реализовать с</p>
<p>помощью следующего алгоритма:</p>
<p>- Сервер создает серверное сокетное соединение.</p>
<p>- В цикле ожидает, когда какой-то клиент подключится к сокету.</p>
<p>- Создает новый поток обработчик Handler, в котором будет происходить обмен</p>
<p>сообщениями с клиентом.</p>
<p>- Ожидает следующее соединение.</p>
<p></p>
<p>Добавь:</p>
<p>1)	В класс Server приватный статический вложенный класс Handler, унаследованный от</p>
<p>Thread.</p>
<p>2)	В класс Handler поле socket типа Socket.</p>
<p>3)	В класс Handler конструктор, принимающий в качестве параметра Socket и</p>
<p>инициализирующий им соответствующее поле класса.</p>
<p>4)	Метод main класса Server, должен:</p>
<p>а) Запрашивать порт сервера, используя ConsoleHelper.</p>
<p>б) Создавать серверный сокет java.net.ServerSocket, используя порт из предыдущего пункта.</p>
<p>в) Выводить сообщение, что сервер запущен.</p>
<p>г) В бесконечном цикле слушать и принимать входящие сокетные соединения только что созданного</p>
<p>серверного сокета.</p>
<p>д) Создавать и запускать новый поток Handler, передавая в конструктор сокет из предыдущего пункта.</p>
<p>е) После создания потока обработчика Handler переходить на новый шаг цикла.</p>
<p>ж) Предусмотреть закрытие серверного сокета в случае возникновения исключения.</p>
<p>з) Если исключение Exception все же произошло, поймать его и вывести сообщение</p>
<p>об ошибке.</p>

<hr>
<h3>Чат (5)</h3>
<p>Клиент и сервер будут общаться через сокетное соединение. Одна сторона будет<br />
записывать данные в сокет, а другая читать. Их общение представляет собой обмен<br />
сообщениями <span class="text-corporate"><strong>Message</strong></span>. Класс <strong><span class="text-corporate">Connection</span></strong> будет выполнять роль обертки над классом<br />
<strong>java.net.Socket</strong>, которая должна будет уметь сериализовать и десериализовать объекты<br />
типа <strong><span class="text-corporate">Message</span></strong> в сокет. Методы этого класса должны быть готовы к вызову из разных<br />
потоков.</p>
<p><strong>Добавь в класс Connection:</strong><br />
1) <mark class="user">Final</mark> поля:<br />
а) <strong><span class="text-corporate">Socket</span></strong> <mark class="user">socket</mark><br />
б) <strong><span class="text-corporate">ObjectOutputStream</span></strong> <mark class="user">out</mark><br />
в) <strong><span class="text-corporate">ObjectInputStream</span></strong> <mark class="user">in</mark><br />
2) Конструктор, который должен принимать <strong><span class="text-corporate">Socket</span></strong> в качестве параметра и<br />
инициализировать поля класса. Для инициализации полей <mark class="user">in</mark> и <mark class="user">out</mark> используй<br />
соответствующие потоки сокета. Конструктор может бросать исключение <span class="text-corporate">IOException</span>.<br />
Создать объект класса <strong><span class="text-corporate">ObjectOutputStream</span></strong> нужно до того, как будет создаваться объект<br />
класса ObjectInputStream, иначе может возникнуть взаимная блокировка потоков,<br />
которые хотят установить соединение через класс <strong><span class="text-corporate">Connection</span></strong>. Более подробно об этом<br />
ты можешь прочитать в спецификации класса <strong><span class="text-corporate">ObjectInputStream</span></strong>.<br />
3) Метод <mark>void send(Message <strong>message</strong>) throws IOException</mark>. Он должен записывать<br />
(сериализовать) сообщение <mark class="green">message</mark> в <mark class="green">ObjectOutputStream</mark>. Этот метод будет<br />
вызываться из нескольких потоков. Позаботься, чтобы запись в объект<br />
<mark class="green">ObjectOutputStream</mark> была возможна только одним потоком в определенный момент<br />
времени, остальные желающие ждали завершения записи. При этом другие методы<br />
класса Connection не должны быть заблокированы.<br />
4) Метод <mark>Message receive() throws IOException</mark>, <mark>ClassNotFoundException</mark>. Он должен читать<br />
(десериализовать) данные из <mark class="green">ObjectInputStream</mark>. Сделай так, чтобы операция чтения<br />
не могла быть одновременно вызвана несколькими потоками, при этом вызов других<br />
методы класса <strong><span class="text-corporate">Connection</span></strong> не блокировать.<br />
5) Метод <mark>SocketAddress getRemoteSocketAddress()</mark>, возвращающий удаленный адрес<br />
сокетного соединения.<br />
6) Метод <mark>void close() throws IOException</mark>, который должен закрывать все ресурсы класса.</p>
<p>Класс <strong><span class="text-corporate">Connection</span></strong> должен поддерживать интерфейс <strong><span class="text-yellow">Closeable</span></strong>.</p>

<hr>
<h3>Чат (4)</h3>
<p>Сообщение <span class="text-corporate"><strong>Message</strong></span> – это данные, которые одна сторона отправляет, а вторая принимает.<br />
Каждое сообщение должно иметь тип <strong><span class="text-corporate">MessageType</span></strong>, а некоторые и дополнительные<br />
данные, например, текстовое сообщение должно содержать текст. Т.к. сообщения будут<br />
создаваться в одной программе, а читаться в другой, удобно воспользоваться механизмом<br />
сериализации для перевода класса в последовательность битов и наоборот.</p>
<p><strong>Добавь в класс <span class="text-corporate">Message</span>:</strong><br />
1) Поддержку интерфейса <strong><span class="text-yellow">Serializable</span></strong>.<br />
2) <mark class="user">final</mark> поле типа <span class="text-corporate"><strong>MessageType type</strong></span>, которое будет содержать тип сообщения.<br />
3) <mark class="user">final</mark> поле типа <strong><span class="text-corporate">String data</span></strong>, которое будет содержать данные сообщения.<br />
4) <strong>Геттеры</strong> для этих полей.<br />
5) Конструктор, принимающий только <strong><span class="text-corporate">MessageType</span></strong>, он должен проинициализировать<br />
поле <mark class="user">type</mark> переданным параметром, а поле <mark class="user">data</mark> оставить равным <strong><span class="text-neon">null</span></strong>.<br />
6) Конструктор, принимающий <strong><span class="text-corporate">MessageType</span></strong> <span class="text-corporate"><strong>type</strong></span> и <span class="text-corporate"><strong>String data</strong></span>. Он должен также<br />
инициализировать все поля класса.</p>

<hr>
<h3>Чат (3)</h3>
<p>Прежде, чем двигаться дальше, нужно разработать протокол общения клиента и сервера.</p>
<p><strong>Сформулируем основные моменты протокола:</strong><br />
&#8212; Когда новый клиент хочет подсоединиться к серверу, сервер должен запросить имя<br />
клиента.<br />
&#8212; Когда клиент получает запрос имени от сервера он должен отправить свое имя серверу.<br />
&#8212; Когда сервер получает имя клиента он должен принять это имя или запросить новое.<br />
&#8212; Когда новый клиент добавился к чату, сервер должен сообщить остальным участникам о<br />
новом клиенте.<br />
&#8212; Когда клиент покидает чат, сервер должен сообщить остальным участникам об этом.<br />
&#8212; Когда сервер получает текстовое сообщение от клиента, он должен переслать его всем<br />
остальным участникам чата.</p>
<p>Добавь для каждого пункта вышеописанного протокола соответствующее значение в <span class="text-neon"><strong>enum</strong></span><br />
<strong>MessageType:</strong><br />
1) <mark class="green">NAME_REQUEST</mark> – запрос имени.<br />
2) <mark class="green">USER_NAME</mark> – имя пользователя.<br />
3) <mark class="green">NAME_ACCEPTED</mark> – имя принято.<br />
4) <mark class="green">TEXT</mark> – текстовое сообщение.<br />
5) <mark class="green">USER_ADDED</mark> – пользователь добавлен.<br />
6) <mark class="green">USER_REMOVED</mark> – пользователь удален.</p>

<hr>
<h3>Чат (2)</h3>
<p>Первым делом, для удобства работы с консолью реализуем класс <span class="text-corporate"><strong>ConsoleHelper</strong></span>. В<br />
дальнейшем, вся работа с консолью должна происходить через этот класс.</p>
<p><strong>Добавь в него:</strong><br />
1. Статическое поле типа <span class="text-corporate">BufferedReader</span>, инициализированное с помощью <mark>System.in</mark>.<br />
2. Статический метод <mark>writeMessage(String <strong>message</strong>)</mark>, который должен выводить<br />
сообщение message в консоль.<br />
3. Статический метод <mark>String readString()</mark>, который должен считывать строку с<br />
консоли. Если во время чтения произошло исключение, вывести пользователю<br />
сообщение &#171;<em><strong>Произошла ошибка при попытке ввода текста. Попробуйте еще раз.</strong></em>&#187; И<br />
повторить ввод. Метод не должен пробрасывать исключения IOException наружу.<br />
Другие исключения не должны обрабатываться.<br />
4. Статический метод <mark>int readInt()</mark>. Он должен возвращать введенное число и<br />
использовать метод <mark>readString()</mark>. Внутри метода обработать исключение<br />
<strong><span class="text-corporate">NumberFormatException</span></strong>. Если оно произошло вывести сообщение &#171;<em><strong>Произошла ошибка</strong></em><br />
<em><strong> при попытке ввода числа. Попробуйте еще раз.&#187;</strong></em> И повторить ввод числа.</p>
<p>В этой задаче и далее, если не указано дополнительно другого, то все поля класса должны<br />
быть приватными, а методы публичными.</p>

<hr>
<h3>Чат (1)</h3>
<p>Сегодня мы напишем чат. Набор программ с помощью которого можно будет<br />
обмениваться текстовыми сообщения. Набор будет состоять из одного сервера и<br />
нескольких клиентов, по одному для каждого участника чата.</p>
<p>Начнем с сервера. Нам понадобятся такие классы:<br />
1) <span class="text-corporate"><strong>Server</strong></span> – основной класс сервера.<br />
2) <span class="text-corporate"><strong>MessageType</strong></span> – <strong>enum</strong>, который отвечает за тип сообщений пересылаемых между<br />
клиентом и сервером.<br />
3) <span class="text-corporate"><strong>Message</strong></span> – класс, отвечающий за пересылаемые сообщения.<br />
4) <strong><span class="text-corporate">Connection</span></strong> – класс соединения между клиентом и сервером.<br />
5) <span class="text-corporate"><strong>ConsoleHelper</strong></span> – вспомогательный класс, для чтения или записи в консоль.</p>
<p>Создай эти классы и добавь метод <mark>main</mark> в класс <strong><span class="text-corporate">Server</span></strong>.</p>

</div>
